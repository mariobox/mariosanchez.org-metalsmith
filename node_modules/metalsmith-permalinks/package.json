{
  "_from": "metalsmith-permalinks@2.0.0",
  "_id": "metalsmith-permalinks@2.0.0",
  "_inBundle": false,
  "_integrity": "sha512-Vunug89+fdMlrOO5z1WZP/Zceo/9Y3PB1tRz8w/xY2PjcqkGqYVzHF4jw9HdU2kdMlU1h6+tcJ5Tj59NfpqTgw==",
  "_location": "/metalsmith-permalinks",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "metalsmith-permalinks",
    "fetchSpec": "2.0.0",
    "name": "metalsmith-permalinks",
    "raw": "metalsmith-permalinks@2.0.0",
    "rawSpec": "2.0.0",
    "registry": true,
    "saveSpec": null,
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/metalsmith-permalinks/-/metalsmith-permalinks-2.0.0.tgz",
  "_shasum": "89d0767b52dc86593388ad5d958dfc7da9ed0898",
  "_shrinkwrap": null,
  "_spec": "metalsmith-permalinks@2.0.0",
  "_where": "/home/mariobox/Hacks/mariosanchez.org",
  "bugs": {
    "url": "https://github.com/segmentio/metalsmith-permalinks/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "debug": "^4.1.0",
    "moment": "^2.5.1",
    "slugify": "^1.3.1",
    "substitute": "https://github.com/segmentio/substitute/archive/0.1.0.tar.gz"
  },
  "deprecated": false,
  "description": "A metalsmith plugin for permalinks.",
  "devDependencies": {
    "assert-dir-equal": "^1.1.0",
    "eslint": "^5.7.0",
    "eslint-config-prettier": "^3.1.0",
    "eslint-plugin-prettier": "^3.0.0",
    "metalsmith": "^2.3.0",
    "mocha": "^5.2.0",
    "nodemon": "^1.18.4",
    "prettier": "^1.14.3",
    "rimraf": "^2.4.1",
    "transliteration": "^1.6.6"
  },
  "homepage": "https://github.com/segmentio/metalsmith-permalinks#readme",
  "license": "MIT",
  "main": "lib/index.js",
  "name": "metalsmith-permalinks",
  "optionalDependencies": {},
  "readme": "# metalsmith-permalinks\n\n[![npm version][npm-badge]][npm-url]\n[![code style: prettier][prettier-badge]][prettier-url]\n[![metalsmith: plugin][metalsmith-badge]][metalsmith-url]\n\n[![Build Status][travis-badge]][travis-url]\n\nA Metalsmith plugin that applies a custom permalink pattern to files, and renames them so that they're nested properly for static sites (converting `about.html` into `about/index.html`).\n\n## Installation\n\n    $ npm install metalsmith-permalinks\n\n## Usage\n\n```js\nvar Metalsmith = require('metalsmith');\nvar permalinks = require('metalsmith-permalinks');\n\nvar metalsmith = new Metalsmith(__dirname).use(\n  permalinks({\n    pattern: ':title'\n  })\n);\n```\n\nThe `pattern` can contain a reference to any piece of metadata associated with the file by using the `:PROPERTY` syntax for placeholders.\n\nIf no pattern is provided, the files won't be remapped, but the `path` metadata key will still be set, so that you can use it for outputting links to files in the template.\n\nThe `pattern` can also be a set as such:\n\n```js\nvar Metalsmith = require('metalsmith');\nvar permalinks = require('metalsmith-permalinks');\n\nvar metalsmith = new Metalsmith(__dirname).use(\n  permalinks({\n    // original options would act as the keys of a `default` linkset,\n    pattern: ':title',\n    date: 'YYYY',\n\n    // each linkset defines a match, and any other desired option\n    linksets: [\n      {\n        match: { collection: 'blogposts' },\n        pattern: 'blog/:date/:title',\n        date: 'mmddyy'\n      },\n      {\n        match: { collection: 'pages' },\n        pattern: 'pages/:title'\n      }\n    ]\n  })\n);\n```\n\n#### Dates\n\nBy default any date will be converted to a `YYYY/MM/DD` format when using in a permalink pattern, but you can change the conversion by passing a `date` option:\n\n```js\nmetalsmith.use(\n  permalinks({\n    pattern: ':date/:title',\n    date: 'YYYY'\n  })\n);\n```\n\nIt uses [moment.js](http://momentjs.com/docs/#/displaying/format/) to format the string.\n\n#### Custom 'slug' function\n\nIf you do not like filenames, you can replace slug function.\nFor now only js version of syntax is supported and tested.\n\n```js\nmetalsmith.use(\n  permalinks({\n    pattern: ':title',\n    slug: require('transliteration').slugify\n  })\n);\n```\n\nThere are plenty on npm for transliteration and slugs. <https://www.npmjs.com/browse/keyword/transliteration>, better than default slug-component.\n\n#### Relative Files\n\nWhen this plugin rewrites your files to be permalinked properly, it will also duplicate sibling files so that relative links like `/images/cat.gif` will be preserved nicely. You can turn this feature off by setting the `relative` option to `false`.\n\nFor example for this source directory:\n\n    src/\n      css/\n        style.css\n      post.html\n\nHere's what the build directory would look like with `relative` on:\n\n    build/\n      post/\n        index.html\n        css/\n          style.css\n      css/\n        style.css\n\nAnd here's with `relative` off:\n\n    build/\n      post/\n        index.html\n      css/\n        style.css\n\n\n`relative` can also be set to `folder`, which uses a strategy that considers files in folder as siblings if the folder is named after the html file.\n\nFor example using the `folder` strategy with this source directory:\n\n    src/\n      post.html\n      post/\n        image.jpg\n\n\nHere's what the build directory would look like with `relative` set to `folder`:\n\n    build/\n        index.html\n        image.jpg\n\n#### Skipping Permalinks for a file\n\nA file can be ignored by the metalsmith-permalinks plugin if you pass the `permalink: false` option to the yaml metadata of a file.\nThis is useful for hosting a static site on AWS S3, where there is a top level `error.html` file and not an `error/index.html` file.\n\nFor example, in your error.md file:\n\n```js\n---\ntemplate: error.html\ntitle: error\npermalink: false\n---\n```\n\n#### Slug Options\n\n[slug](https://www.npmjs.com/package/slugify) is used for slugifying strings and it's set to lower-case mode by default.\n\nYou can pass custom [slug options](https://www.npmjs.com/package/slugify#options):\n\n```js\nmetalsmith.use(\n  permalinks({\n    slug: {\n      replacement: '_',\n      lower: false\n    }\n  })\n);\n```\n\n#### Overriding the permalink for a file\n\nUsing the `permalink` property in a file's front-matter, its permalink can be overridden. This can be useful for transferring\nprojects over to Metalsmith where pages don't follow a strict permalink system.\n\nFor example, in one of your pages:\n\n```js\n---\ntitle: My Post\npermalink: \"posts/my-post\"\n---\n```\n\n#### CLI\n\nYou can also use the plugin with the Metalsmith CLI by adding a key to your `metalsmith.json` file:\n\n```json\n{\n  \"plugins\": {\n    \"metalsmith-permalinks\": {\n      \"pattern\": \":title\"\n    }\n  }\n}\n```\n\n## License\n\nMIT\n\n[npm-badge]: https://img.shields.io/npm/v/metalsmith-permalinks.svg\n[npm-url]: https://www.npmjs.com/package/metalsmith-permalinks\n[travis-badge]: https://travis-ci.org/segmentio/metalsmith-permalinks.svg?branch=master\n[travis-url]: https://travis-ci.org/segmentio/metalsmith-permalinks\n[prettier-badge]: https://img.shields.io/badge/code_style-prettier-ff69b4.svg\n[prettier-url]: https://github.com/prettier/prettier\n[metalsmith-badge]: https://img.shields.io/badge/metalsmith-plugin-green.svg?longCache=true\n[metalsmith-url]: http://metalsmith.io\n",
  "readmeFilename": "Readme.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/segmentio/metalsmith-permalinks.git"
  },
  "scripts": {
    "dev": "nodemon --exec 'npm test'",
    "lint": "eslint --cache --fix .",
    "postversion": "git push && git push --tags && npm publish",
    "pretest": "npm run lint",
    "preversion": "npm test",
    "test": "mocha test"
  },
  "version": "2.0.0"
}
